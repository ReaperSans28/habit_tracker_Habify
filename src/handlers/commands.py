import json
import os
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

commands_router = Router()

class HabitStates(StatesGroup):
    waiting_for_habit_text = State()
    waiting_for_habit_image = State()

@commands_router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start"""
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.\n"
        f"–Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ç–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        f"–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å -> /help"
        f"–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É - /add_habit"
    )
    await message.answer(welcome_text)


@commands_router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help"""
    welcome_text = (
        f"–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        f"/start - –∑–∞–ø—É—Å–∫ / –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞\n"
        f"/add_habit - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        f"/habits - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏"
    )
    await message.answer(welcome_text)


@commands_router.message(Command("add_habit"))
async def cmd_add_habit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã add_habit"""
    await state.set_state(HabitStates.waiting_for_habit_text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ - —á–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'"
    )


@commands_router.message(Command("habits"))
async def cmd_habits(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã habits - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    try:
        with open("data/habits.json", "r", encoding="utf-8") as f:
            habits_data = json.load(f)
        
        user_id = str(message.from_user.id)
        
        if user_id not in habits_data or not habits_data[user_id]:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
            return
        
        habits = habits_data[user_id]
        await message.answer(f"–£ –≤–∞—Å {len(habits)} –ø—Ä–∏–≤—ã—á–µ–∫:\n")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–∏–≤—ã—á–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, habit in enumerate(habits, 1):
            habit_text = (
                f"üìã –ü—Ä–∏–≤—ã—á–∫–∞ {i}:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {habit['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {habit['description']}\n"
                f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {habit['created_at']}"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            if habit.get('image_path') and os.path.exists(habit['image_path']):
                try:
                    with open(habit['image_path'], 'rb') as photo:
                        await message.answer_photo(
                            photo=photo,
                            caption=habit_text
                        )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(habit_text + f"\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(habit_text)

    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
