import os
from datetime import datetime
from aiogram.types import Message
from aiogram import Router
from aiogram.fsm.context import FSMContext
from .commands import HabitStates
from .text import save_habit_to_json

media_router = Router()

@media_router.message(HabitStates.waiting_for_habit_image)
async def process_habit_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        habit_text = data['habit_text']
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        user_id = message.from_user.id
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"habit_{user_id}_{timestamp}.jpg"
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = f"data/habit_images/{filename}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file_info = await message.bot.get_file(photo.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("data/habit_images", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_info.file_path, image_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await save_habit_to_json(message, habit_text, image_path)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º! üì∑"
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await state.clear()
